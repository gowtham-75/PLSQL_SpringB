-- Drop old objects (if they exist) to start clean
DROP TABLE CUSTOMERS CASCADE CONSTRAINTS PURGE;
DROP TABLE PRODUCTS CASCADE CONSTRAINTS PURGE;
DROP TABLE ORDERS CASCADE CONSTRAINTS PURGE;
DROP TABLE ORDER_ITEMS CASCADE CONSTRAINTS PURGE;
DROP TABLE INVENTORY CASCADE CONSTRAINTS PURGE;
DROP TABLE INVOICES CASCADE CONSTRAINTS PURGE;
DROP TABLE INVOICE_LINES CASCADE CONSTRAINTS PURGE;
DROP TABLE SHIPMENTS CASCADE CONSTRAINTS PURGE;
DROP TABLE PAYMENTS CASCADE CONSTRAINTS PURGE;

-- Create tables
CREATE TABLE CUSTOMERS (
  CUSTOMER_ID       NUMBER(10)       PRIMARY KEY,
  CUSTOMER_NAME     VARCHAR2(200),
  CUSTOMER_STATUS   VARCHAR2(50),
  CREDIT_LIMIT      NUMBER(12,2),
  BALANCE           NUMBER(12,2),
  CREATED_DATE      DATE,
  LAST_UPDATED_DATE DATE
);

CREATE TABLE PRODUCTS (
  PRODUCT_ID       NUMBER(10)      PRIMARY KEY,
  PRODUCT_NAME     VARCHAR2(200),
  PRODUCT_SKU      VARCHAR2(100),
  PRODUCT_PRICE    NUMBER(12,2),
  PRODUCT_STATUS   VARCHAR2(50),
  CREATED_DATE     DATE,
  LAST_UPDATED_DATE DATE
);

CREATE TABLE ORDERS (
  ORDER_ID         NUMBER(10)      PRIMARY KEY,
  CUSTOMER_ID      NUMBER(10),
  ORDER_DATE       DATE,
  ORDER_STATUS     VARCHAR2(50),
  ORDER_TOTAL      NUMBER(12,2),
  SHIPMENT_ID      NUMBER(10),
  PAYMENT_STATUS   VARCHAR2(50),
  INVOICE_ID       NUMBER(10),
  CREATED_DATE     DATE,
  LAST_UPDATED_DATE DATE,
  FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID)
);

CREATE TABLE ORDER_ITEMS (
  ORDER_ITEM_ID   NUMBER(10) PRIMARY KEY,
  ORDER_ID        NUMBER(10),
  PRODUCT_ID      NUMBER(10),
  QUANTITY        NUMBER(10),
  UNIT_PRICE      NUMBER(12,2),
  TOTAL_PRICE     NUMBER(12,2),
  CREATED_DATE    DATE,
  LAST_UPDATED_DATE DATE,
  FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID),
  FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID)
);

CREATE TABLE INVENTORY (
  PRODUCT_ID      NUMBER(10),
  WAREHOUSE_ID    NUMBER(10),
  STOCK_QUANTITY  NUMBER(10),
  REORDER_LEVEL   NUMBER(10),
  LAST_UPDATED_DATE DATE,
  PRIMARY KEY (PRODUCT_ID, WAREHOUSE_ID),
  FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID)
);

CREATE TABLE INVOICES (
  INVOICE_ID       NUMBER(10) PRIMARY KEY,
  ORDER_ID         NUMBER(10),
  INVOICE_DATE     DATE,
  TOTAL_AMOUNT     NUMBER(12,2),
  CREATED_DATE     DATE,
  LAST_UPDATED_DATE DATE,
  FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID)
);

CREATE TABLE INVOICE_LINES (
  INVOICE_LINE_ID  NUMBER(10) PRIMARY KEY,
  INVOICE_ID       NUMBER(10),
  PRODUCT_ID       NUMBER(10),
  QUANTITY         NUMBER(10),
  UNIT_PRICE       NUMBER(12,2),
  LINE_TOTAL       NUMBER(12,2),
  CREATED_DATE     DATE,
  LAST_UPDATED_DATE DATE,
  FOREIGN KEY (INVOICE_ID) REFERENCES INVOICES(INVOICE_ID),
  FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID)
);

CREATE TABLE SHIPMENTS (
  SHIPMENT_ID      NUMBER(10) PRIMARY KEY,
  ORDER_ID         NUMBER(10),
  SHIPMENT_DATE    DATE,
  SHIPMENT_STATUS  VARCHAR2(50),
  TRACKING_NUMBER  VARCHAR2(200),
  CREATED_DATE     DATE,
  LAST_UPDATED_DATE DATE,
  FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID)
);

CREATE TABLE PAYMENTS (
  PAYMENT_ID       NUMBER(10) PRIMARY KEY,
  ORDER_ID         NUMBER(10),
  PAYMENT_DATE     DATE,
  PAYMENT_AMOUNT   NUMBER(12,2),
  PAYMENT_METHOD   VARCHAR2(50),
  PAYMENT_STATUS   VARCHAR2(50),
  CREATED_DATE     DATE,
  LAST_UPDATED_DATE DATE,
  FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID)
);

-- Simple indexes for performance
CREATE INDEX IDX_ORDERS_CUSTOMER ON ORDERS(CUSTOMER_ID);
CREATE INDEX IDX_ORDER_ITEMS_ORDER ON ORDER_ITEMS(ORDER_ID);
CREATE INDEX IDX_INVOICES_ORDER ON INVOICES(ORDER_ID);
CREATE INDEX IDX_SHIPMENTS_ORDER ON SHIPMENTS(ORDER_ID);
CREATE INDEX IDX_PAYMENTS_ORDER ON PAYMENTS(ORDER_ID);
CREATE INDEX IDX_INVENTORY_PRODUCT ON INVENTORY(PRODUCT_ID);

-- Sequences
CREATE SEQUENCE SEQ_CUSTOMER_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_PRODUCT_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_ORDER_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_ORDER_ITEM_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_INVOICE_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_INVOICE_LINE_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_SHIPMENT_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_PAYMENT_ID START WITH 1 INCREMENT BY 1;

-- Sample data insertion
INSERT INTO CUSTOMERS (CUSTOMER_ID, CUSTOMER_NAME, CUSTOMER_STATUS, CREDIT_LIMIT, BALANCE, CREATED_DATE, LAST_UPDATED_DATE)
VALUES (SEQ_CUSTOMER_ID.NEXTVAL, 'ACME Corp', 'ACTIVE', 100000, 0, SYSDATE, SYSDATE);

INSERT INTO CUSTOMERS (CUSTOMER_ID, CUSTOMER_NAME, CUSTOMER_STATUS, CREDIT_LIMIT, BALANCE, CREATED_DATE, LAST_UPDATED_DATE)
VALUES (SEQ_CUSTOMER_ID.NEXTVAL, 'Beta Supplies', 'ACTIVE', 50000, 0, SYSDATE, SYSDATE);

INSERT INTO PRODUCTS (PRODUCT_ID, PRODUCT_NAME, PRODUCT_SKU, PRODUCT_PRICE, PRODUCT_STATUS, CREATED_DATE, LAST_UPDATED_DATE)
VALUES (SEQ_PRODUCT_ID.NEXTVAL, 'Widget A', 'WID-A-100', 25.00, 'ACTIVE', SYSDATE, SYSDATE);

INSERT INTO PRODUCTS (PRODUCT_ID, PRODUCT_NAME, PRODUCT_SKU, PRODUCT_PRICE, PRODUCT_STATUS, CREATED_DATE, LAST_UPDATED_DATE)
VALUES (SEQ_PRODUCT_ID.NEXTVAL, 'Widget B', 'WID-B-200', 50.00, 'ACTIVE', SYSDATE, SYSDATE);

INSERT INTO INVENTORY (PRODUCT_ID, WAREHOUSE_ID, STOCK_QUANTITY, REORDER_LEVEL, LAST_UPDATED_DATE)
SELECT PRODUCT_ID, 1, 1000, 200, SYSDATE FROM PRODUCTS;

COMMIT;