-- Create a log table
DROP TABLE SYSTEM_LOG PURGE;
CREATE TABLE SYSTEM_LOG (
  LOG_ID NUMBER(10) PRIMARY KEY,
  LOG_TIMESTAMP DATE,
  LOG_LEVEL VARCHAR2(50),
  LOG_MESSAGE VARCHAR2(4000)
);

CREATE SEQUENCE SEQ_LOG_ID START WITH 1 INCREMENT BY 1;

-- Instead of using DBMS_OUTPUT, log messages could be inserted here.
-- Let's create a trigger that simulates capturing important updates.
CREATE OR REPLACE TRIGGER TRG_ORDERS_STATUS_CHANGE
AFTER UPDATE OF ORDER_STATUS ON ORDERS
FOR EACH ROW
WHEN (NEW.ORDER_STATUS <> OLD.ORDER_STATUS)
DECLARE
  v_msg VARCHAR2(4000);
BEGIN
  v_msg := 'Order ' || :NEW.ORDER_ID || ' status changed from ' || :OLD.ORDER_STATUS || ' to ' || :NEW.ORDER_STATUS;
  INSERT INTO SYSTEM_LOG (LOG_ID, LOG_TIMESTAMP, LOG_LEVEL, LOG_MESSAGE)
  VALUES (SEQ_LOG_ID.NEXTVAL, SYSDATE, 'INFO', v_msg);
END;
/
